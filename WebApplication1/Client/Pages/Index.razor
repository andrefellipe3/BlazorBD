@page "/"
@inject HttpClient Http;
@inject IJSRuntime JSRuntime
@using System.Collections.ObjectModel;
@using System.ComponentModel;
@using WebApplication1.Shared;

<head>
</head>
<style>
    table, th, td {
        border: 2px solid black;
    }
</style>
<body>

    <h2>Tabela de Pessoas</h2>


    <div id="Erro"></div>
    

    <DxDataGrid Data="@listpessoas"
                ShowFilterRow="true"
                RowRemovingAsync="@OnRowRemovingAsync"
                RowUpdatingAsync="@OnRowUpdatingAsync"
                RowInsertingAsync="@OnRowInsertingAsync"
                @bind-SingleSelectedDataRow="PessoaSelecionada">


        <Columns>
            <DxDataGridSpinEditColumn Field="@nameof(Pessoa.Id)" EditorVisible="false"></DxDataGridSpinEditColumn>
            <DxDataGridColumn Field="@nameof(Pessoa.Nome)">
            </DxDataGridColumn>
            <DxDataGridSpinEditColumn Field="@nameof(Pessoa.Idade)"></DxDataGridSpinEditColumn>
            <DxDataGridCommandColumn></DxDataGridCommandColumn>
        </Columns>

    </DxDataGrid>

</body>

@code
{
    public Pessoa PessoaSelecionada { get; set; } = new();
    Pessoa pessoa = new Pessoa(); //instancia do objeto pessoa
    Pessoa alterarPessoa = new Pessoa(); //Instancia do objeto alterarPessoa pra utilizar no momento da alteracao
    Pessoa backupPessoa = new Pessoa(); //Backup de antes do usuario trocar seus dados no ALTERAR
    ObservableCollection<Pessoa> listpessoas = new ObservableCollection<Pessoa>(); //Muda o estado da lista na tela sem precisar utilizar o StateHasChanged();
    public bool controleFiltro = false;


    public void exibirFiltro ()
        {
        controleFiltro = true;
        }

    //Metodo para buscar a tabela no usuario e salvar em uma lista
    private async Task GetPessoa()
    {
        //Esperando um getAll da tabela Pessoas
        listpessoas = await Http.GetFromJsonAsync<ObservableCollection<Pessoa>>("api/Pessoas/GetAll");
    }


    //Removendo um usuario do BD
    async Task OnRowRemovingAsync(Pessoa pessoaDeletado)
    {

        try
        {
            HttpResponseMessage x = await Http.DeleteAsync("api/Pessoas/DeletePessoa?pessoaId=" + pessoaDeletado.Id);// Removendo do banco de dados

            if (x.IsSuccessStatusCode)
            {
                int Index = listpessoas.IndexOf(pessoaDeletado);
                listpessoas.RemoveAt(Index);
                //StateHasChanged();
            }
        }
        catch
        {
            Console.WriteLine("Erro em Remover o usuario no BD");
        }
    }

    //Atualizando no BD
    async Task OnRowUpdatingAsync(Pessoa pessoaAtualizada, IDictionary<string, object> valorNovo)
    {
        try
        {
            Pessoa pessoaEditada = DicionarioToObject.DictionaryToPessoa(pessoaAtualizada, valorNovo); //Fazendo os casts de pessoaAtualizada e recebendo o objeto em pessoaEditada
            HttpResponseMessage resposta = await Http.PutAsJsonAsync<Pessoa>("api/Pessoas/UpdatePessoa", pessoaEditada); //Esperando uma resposta se o update foi um sucesso ou nao

            if (resposta.IsSuccessStatusCode)
            {
                int index = listpessoas.IndexOf(pessoaAtualizada); //Pegando o index de pessoaAtualizada
                listpessoas[index].Nome = pessoaEditada.Nome; //Sobrescrevendo os atributos daquela pessoa na lista
                listpessoas[index].Idade = pessoaEditada.Idade;//Sobrescrevendo os atributos daquela pessoa na lista
            }

        }
        catch
        {
            Console.WriteLine("Erro em atualizar no Banco de Dados");

        }
    }

    //Adiciona um novo usuario no Banco de Dados
    async Task OnRowInsertingAsync(IDictionary<string, object> novoValor)
    {

        Pessoa adicionarPessoa = DicionarioToObject.DictionaryToPessoa(null, novoValor); //Indo no dicionario fazer os cast dos valores

        if (adicionarPessoa.Idade >= 18 && adicionarPessoa.Nome != null)
        {
            try
            {

                //Pessoa adicionarPessoa = DicionarioToObject.DictionaryToPessoa(null, novoValor); //Indo no dicionario fazer os cast dos valores
                HttpResponseMessage resposta = await Http.PostAsJsonAsync<Pessoa>("api/Pessoas/AddPessoa", adicionarPessoa); // Recebendo uma resposta de sucesso ou nao e um objeto no conteudo

                if (resposta.IsSuccessStatusCode) // Se foi um sucesso a inserção
                {
                    //Atualiza tabela
                    Pessoa pessoa = await resposta.Content.ReadFromJsonAsync<Pessoa>();
                    adicionarPessoa.Id = pessoa.Id;
                    listpessoas.Add(adicionarPessoa);
                }
            }
            catch
            {
                Console.WriteLine("Erro ao adicionar");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alertToast", "warning", "Dados Invalidos", "#Erro");
        }

    }



    //Valores default da nova linha
    Task OnInitNewRowAsync(Dictionary<string, object> Valor)
    {
        Valor.Add("Id", PessoaSelecionada?.Id);
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync() // Primeiro carregamento na tela
    {
        await GetPessoa(); //Aguarda a resposta de GetPessoa para executar
    }

}



